@page "/todo"

@*<h3>ToDo</h3>*@ 
@*10) Update the <h3> header to show a count of the number of todo items that aren't complete (IsDone is false)*@
<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>

@* 2) Add unordered list markup and a foreach loop to render each todo item as a list item (<li>). *@
<ul>
    @foreach (var todo in todos)
    {
        @*<li>@todo.Title</li>*@
        @*9) Add a checkbox input for each todo item and bind its value to the IsDone property*@
        <input type="checkbox" @bind="todo.IsDone" />
        <input @bind="todo.Title" />
        <br>
    }
</ul>

@* 3) The app requires UI elements for adding todo items to the list. Add a text input (<input>) and a button (<button>) below the unordered list (<ul>...</ul>): *@
@*<input placeholder="Something todo" />*@
@*<button>Add todo</button>*@

@*5) Register the method for the button using the @onclick attribute. *@
@*6) Modify the <input> element to bind newTodo with the @bind attribute:*@
<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>

@* 1) Add a field for the todo items in the @code block. The Todo component uses this field to maintain the state of the todo list. *@
@code {
    private List<TodoItem> todos = new List<TodoItem>();
    
    //7) To get the title of the new todo item, add a newTodo string field.
    private string? newTodo;
    
    //4) Add an AddTodo method to the Todo component.
    private void AddTodo()
    {
        //8) Update the AddTodo method to add the TodoItem with the specified title to the list. Clear the value of the text input by setting newTodo to an empty string
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo });
            newTodo = string.Empty;
        }
    }
}
